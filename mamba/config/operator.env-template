##--START REPLACE CONTENTS--##
# EKS Cluster information, include:
# 1) Cluster name,  for alb-ingress
# 2) Region for efs
# 3) Auto scaling group and size for cluster autoscaler
EKS_CLUSTER_NAME="cluster-example"
EKS_REGION="ap-southeast-1"
EKS_AUTO_SCALING_GROUP="eksctl-example-nodegroup-NodeGroup1-example-NodeGroup-XXXXXXX"
EKS_SCALING_SIZE="2:10"

DEPLOYMENT_ENV="develop"

# RootCA configuration
RCA_NAME="rca-akc"
RCA_DOMAIN="akachain"

# EFS information
# DNS name
EFS_SERVER="fs-xxxxxxxx.efs.ap-southeast-1.amazonaws.com"
# File System ID
EFS_SERVER_ID="fs-xxxxxxxx"
EFS_ROOT="/tmp/artifact/${EKS_CLUSTER_NAME}"
EFS_EXTEND="${EKS_CLUSTER_NAME}"

# DO NOT MODIFY THIS PART
# This will automatically be filled by the environment setup script
EFS_PATH="efs-pvc-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
EFS_POD="test-efs-xxxxxxxxx-xxxxx"

# Names of the Orderer organizations.
ORDERER_ORGS="orderer"
ORDERER_DOMAINS="orderer"
# ORDERER_TYPE: currently support solo, kafka
ORDERER_TYPE="kafka"

# Kafka information
KAFKA_NAMESPACE="kafka"

# Config block
#  Batch Timeout: The amount of time to wait before creating a batch.
#  Max Message Count: The maximum number of messages to permit in a batch.
BATCH_TIMEOUT="1s"
BATCH_SIZE_MAX_MESSAGE_COUNT="100"

# Number of Orderer nodes. We generate 3 orderers as follows:
# 1) for peers connecting to the orderer locally, from within the same K8s cluster. No NLB is required for OSN #1
# 2) for peers connecting to the orderer remotely, via TLS. An NLB is required that handles TLS traffic
# 3) for client applications connecting to the orderer remotely, without TLS. An NLB is required that handles
NUM_ORDERERS=1

# Names of the Peer organizations.
PEER_ORGS="mambatest"
PEER_DOMAINS="mambatest"
PEER_PREFIX="peer"

# Number of peers in each Peer organization
NUM_PEERS=2

# State DB
# STATEDB="mongodb"
# STATEDB_PORT="27017"
# STATEDB_PORT2="27018"
# STATEDB_IMAGE="mongo"
# STATEDB_INIT_USER_NAME="MONGO_INITDB_ROOT_USERNAME"
# STATEDB_INIT_PASSWORD_NAME="MONGO_INITDB_ROOT_PASSWORD"
# STATEDB_INIT_SECRET_NAME="MONGO_INITDB_ROOT_SECRET"
# CORE_LEDGER_STATE_CONFIG_ADDRESS="CORE_LEDGER_STATE_MONGODBCONFIG_MONGODBADDRESS"
# CORE_LEDGER_STATE_CONFIG_USERNAME="CORE_LEDGER_STATE_MONGODBCONFIG_USERNAME"
# CORE_LEDGER_STATE_CONFIG_PASSWORD="CORE_LEDGER_STATE_MONGODBCONFIG_PASSWORD"

STATEDB="CouchDB"
STATEDB_IMAGE="couchdb:2.3.1"
STATEDB_PORT="5984"
STATEDB_PORT2="5986"
STATEDB_INIT_USER_NAME="COUCHDB_USER"
STATEDB_INIT_PASSWORD_NAME="COUCHDB_PASSWORD"
STATEDB_INIT_SECRET_NAME="COUCHDB_SECRET"
CORE_LEDGER_STATE_CONFIG_ADDRESS="CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS"
CORE_LEDGER_STATE_CONFIG_USERNAME="CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME"
CORE_LEDGER_STATE_CONFIG_PASSWORD="CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD"


# Channel information
CHANNEL_NAME="akctestchannel"

# Change this if you're using private docker image
PRIVATE_DOCKER_IMAGE=true
PRIVATE_DOCKER_SEVER="docker.pkg.github.com"
PRIVATE_DOCKER_USER="mamba-test"
PRIVATE_DOCKER_PASSWORD="xxxxxxxxxxx"
PRIVATE_DOCKER_EMAIL="mamba@akchain.io"

# The tag of the docker images to download for Fabric CA and Fabric. Equates to the Fabric version
# FABRIC_TAG="1.4.1"
# FABRIC_CA_TAG="1.4.1"
FABRIC_TAG="2.0.0"
FABRIC_CA_TAG="1.4.6"
COUCHDB_TAG="2.3"

# Fill this if you're using remote org
EXTERNAL_ORDERER_ADDRESSES="" # ex: orderer.example.com
EXTERNAL_ORG_PEER0_ADDRESSES="" # ex: peer0-external-org.example.com
EXTERNAL_ORG_PEER1_ADDRESSES="" # ex: peer1-external-org.example.com
EXTERNAL_RCA_ADDRESSES=""

################# Add org
NEW_ORG_NAME="neworg"

# Endorsement org infomation
ENDORSEMENT_ORG_NAME="" # ex: peer0-operator.example peer1-operator.example
ENDORSEMENT_ORG_ADDRESS="" # ex: peer0-operator.example.com peer1-operator.example.com
ENDORSEMENT_ORG_TLSCERT="" # ex: ica-operator-ca-chain.pem ica-operator-ca-chain.pem

##################

##--END REPLACE CONTENTS--##
