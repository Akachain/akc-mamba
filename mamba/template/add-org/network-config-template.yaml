
---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "Akachain"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "Akachain Network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section will be added on a per org basis see org1.yaml and org2.yaml
#
# client
#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:

  {{CHANNEL_NAME}}:
    orderers:
      - orderer1-{{ORDERER_NAME}}.{{ORDERER_DOMAIN}}

    peers:

      peer0-{{ORGNAME}}.{{ORGDOMAIN}}:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true


      peer1-{{ORGNAME}}.{{ORGDOMAIN}}:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: false


organizations:


  {{ORGNAME}}:
    mspid: {{ORGMSP}}

    peers:

      - peer0-{{ORGNAME}}.{{ORGDOMAIN}}


      - peer1-{{ORGNAME}}.{{ORGDOMAIN}}


    # Fabric-CA servers.
    certificateAuthorities:
      - ica-{{ORGNAME}}.{{ORGDOMAIN}}

    adminPrivateKey:
      path: /shared/crypto-config/peerOrganizations/{{ORGDOMAIN}}/users/admin/msp/keystore/key.pem
    signedCert:
      path: /shared/crypto-config/peerOrganizations/{{ORGDOMAIN}}/users/admin/msp/signcerts/cert.pem


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:


  orderer1-{{ORDERER_NAME}}.{{ORDERER_DOMAIN}}:
    url: grpcs://{{ORDERER_EXTERNAL_ADDRESS}}
    # url: grpcs://orderer-external.example.com:7050
    grpcOptions:
      ssl-target-name-override: orderer1-{{ORDERER_NAME}}.{{ORDERER_DOMAIN}}
      grpc-max-send-message-length: -1

    tlsCACerts:
      path: /shared/ica-orderer-ca-chain.pem


peers:
  peer0-{{ORGNAME}}.{{ORGDOMAIN}}:
    url: grpcs://peer0-{{ORGNAME}}.{{ORGDOMAIN}}:7051

    grpcOptions:
      ssl-target-name-override: peer0-{{ORGNAME}}.{{ORGDOMAIN}}
    tlsCACerts:
      path: /shared/ica-{{ORGNAME}}-ca-chain.pem


  peer1-{{ORGNAME}}.{{ORGDOMAIN}}:
    url: grpcs://peer1-{{ORGNAME}}.{{ORGDOMAIN}}:7051

    grpcOptions:
      ssl-target-name-override: peer1-{{ORGNAME}}.{{ORGDOMAIN}}
    tlsCACerts:
      path: /shared/ica-{{ORGNAME}}-ca-chain.pem


#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:


  ica-{{ORGNAME}}.{{ORGDOMAIN}}:
    url: https://ica-{{ORGNAME}}.{{ORGDOMAIN}}:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      path: /shared/ica-{{ORGNAME}}-ca-chain.pem

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: ica-{{ORGNAME}}-admin
        enrollSecret: ica-{{ORGNAME}}-adminpw
    # [Optional] The optional name of the CA.
    caName: ica-{{ORGNAME}}.{{ORGDOMAIN}}
